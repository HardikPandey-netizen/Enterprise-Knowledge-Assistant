
import React, { useState, useMemo } from "react";
import Sidebar from "../components/sidebar";
import Chatquery from "../components/chatquery";
import { Link, Navigate, NavLink } from "react-router-dom";
import { useAuth } from "../Contexts/AuthContext";
import api from "../Services/api";

const Chatbot = () => {
  const { user, token, isLoggedIn, logout } = useAuth();
  const [chats, setChats] = useState([]);
  const [selectedChat, setSelectedChat] = useState(null);
  const [messages, setMessages] = useState("");
  const [showList, setShowList] = useState(true);

  const getRandomColor = (Colors = ["#2b4539", "#61dca3", "#61b3dc"]) => {
    return Colors[Math.floor(Math.random() * Colors.length)];
  };

  const handleInputChange = (e) => {
    const value = e.target.value;
    setMessages(value);

    // Regular expression to match "I want the company of" followed by letters
    const validPattern = /^I want the company of\s*[a-zA-Z]*$/;

    // Show the list if input is empty or matches the valid pattern
    if (value.trim() === "" || validPattern.test(value)) {
      setShowList(true);
    } else {
      setShowList(false);
    }
  };

  const createNewChatIfNeeded = async (message) => {
    if (!selectedChat || !selectedChat._id) {
      const res = await api.post(`/chats/user/${user.id}/create`, {
        message
      });

      const newChat = res.data.data;
      setChats((prev) => [newChat, ...prev]);
      setSelectedChat(newChat);
      return newChat;
    }
    return selectedChat;
  };

  const handleUploadClick = () => {
    if (messages.trim() !== "" && selectedChat) {
      const updatedChats = chats.map((chat) =>
        chat === selectedChat
          ? {
              ...chat,
              messages: [
                ...chat.messages,
                { query: messages, response: "Here’s your result" },
              ],
            }
          : chat
      );
      setChats(updatedChats);
      setSelectedChat({
        ...selectedChat,
        messages: [
          ...selectedChat.messages,
          { query: messages, response: "Here’s your result" },
        ],
      });
      setMessages("");
    }
  };

  return (
    <div className="flex h-screen bg-gray-100">
      <div className="w-60 bg-white border-r border-black p-4">
        <Sidebar
          chats={chats}
          setChats={setChats}
          selectedChat={selectedChat}
          setSelectedChat={setSelectedChat}
          onStartNewChat={() => {
            setSelectedChat({ id: null, messages: [] });
          }}
        />
      </div>
      <div className="flex-1 flex flex-col bg-gray-50">
        <header className="bg-white p-4 flex justify-between items-center">
          <div className="flex flex-row gap-[980px]">
            <h1 className="text-3xl font-medium font-['Kantumruy_Pro','sans-serif']">
              ELECTRON
            </h1>
            {isLoggedIn ? (
              <div
                className="w-8 h-8 ml-7 rounded-full flex items-center justify-center bg-gray-200 text-white text-lg font-semibold"
                style={{ backgroundColor: getRandomColor() }}
              >
                {user?.profilePicture ? (
                  <img
                    src={user.profilePicture}
                    alt="Profile"
                    referrerPolicy="no-referrer"
                    className="w-full h-full rounded-full object-cover"
                  />
                ) : (
                  <span>{user?.username?.charAt(0)?.toUpperCase()}</span>
                )}
              </div>
            ) : (
              <Link
                to="/login"
                className="border border-gray-300 px-3 py-1.5 font-['Inter','sans-serif'] font-semibold rounded-md hover:bg-gray-50 transition-colors"
              >
                Login
              </Link>
            )}
          </div>
        </header>
        <div className="flex-1 p-6 space-y-6 overflow-y-auto">
          {selectedChat &&
            selectedChat.messages.map((chat, index) => (
              <Chatquery
                key={index}
                query={chat.query}
                response={chat.response}
              />
            ))}
        </div>
        <footer className="p-4 border border-black mx-4 mb-4">
          {/* Conditional rendering of the list */}

          <div className="flex flex-row">
            <input
              type="text"
              value={messages}
              onChange={handleInputChange} // Handle input changes
              className="px-4 py-2 flex-grow rounded-md text-[#808080] focus:outline-none"
            />
            <img
              src="/assets/icons/Upload Circle.png"
              alt="Chat"
              className="w-7 h-7 self-center mr-2"
              onClick={handleUploadClick}
            />
          </div>
        </footer>
      </div>
    </div>
  );
};

export default Chatbot;
